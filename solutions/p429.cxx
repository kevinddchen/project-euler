// p429.cxx
#include <stdio.h>
#include <iostream>
#include <vector>
#include <math.h>
#include <time.h>
#include "cmathfuncs.h"
using namespace std;


/*

From the prime factorization N = p1^a1 * p2^a2 * ... * pk^ak, the unitary
divisors are generated by setting all a_i's to 0 or a_i. Once we prime
factorize 100 000 000!, we can calculate the sum of squares of all unitary
divisors by iterating as follows:

result = 1
for (p_i is prime divisor):
    result = (result * (p_i^a_i)^2) + result
end

ANSWER 98792821

*/


unsigned short * factorSieve(int size) {
    /* Create prime sieve of smallest prime factor. */
    unsigned short * sieve = new unsigned short[size+1]();
    sieve[0] = sieve[1] = 1;
    for (int i=2; i<= size; i++) {
        if (sieve[i]==0) {
            for (int j=i*i; j<=size; j+=i) {
                if (sieve[j] == 0)
                    sieve[j] = i;
            }
        }
    }
    return sieve;
}



vector<int> primeSieveFactorize(int x, unsigned short * sieve) {
    vector<int> facts;
    while (sieve[x] >= 2) {
        int i = sieve[x];
        int c = 0;
        while (sieve[x] == i or x==i) {
            x /= i;
            c++;
        }
        facts.push_back(i);
        facts.push_back(c);
    }
    if (sieve[x] == 0) {
        facts.push_back(x);
        facts.push_back(1);
    }
    return facts;
}



int p429() {

    int N = 100000000;

    // generate sieve of factors
    unsigned short * sieve = factorSieve(N); 

    // count prime factors of N!
    int * fact_count = new int [N+1]();
    int base, count;
    vector<int> facts;
    vector<int>::iterator iter;
    for (int x=2; x<=N; x++) {

        facts = primeSieveFactorize(x, sieve); 
        iter = facts.begin();

        while (iter != facts.end()) {

            base = *iter++;
            count = *iter++;
            fact_count[base] += count;

        }
    }

    // calculate result
    long long result = 1;
    long long x;
    for (int p=2; p<=N; p++) {

        if (fact_count[p] == 0)
            continue;
        
        x = modpow(p, 2*fact_count[p], 1000000009);
        result = (result * x + result) % 1000000009;
    }

    return result;
}



int main() {
    clock_t t;
    t = clock();
    printf("%d\n", p429());
    t = clock()-t;
    printf("Time: %.3f\n", ((float) t)/CLOCKS_PER_SEC);
}
