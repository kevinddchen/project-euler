#include <cstdio>
#include <ctime>
#include "mathfuncs.h"


/*

From the prime factorization N = p1^a1 * p2^a2 * ... * pk^ak, the unitary
divisors are generated by setting all a_i's to 0 or a_i. Once we prime
factorize 100 000 000!, we can calculate the sum of squares of all unitary
divisors by iterating as follows:

    result = 1
    for (p_i is prime divisor with multiplicity a_i):
        result = (result * (p_i^a_i)^2) + result)

ANSWER 98792821

*/


/* Count the number of times p divides into N!. */
int count_factors(int N, int p)
{
    long result = 0, x = p;
    while (x <= N)
    {
        result += N/x;
        x *= p;
    }
    return result;
}


int p429() {

    const int N = 100'000'000;
    const int M = 1'000'000'009;

    bool * sieve = prime_sieve(N);

    int a;
    long result = 1;
    for (int p=2; p<N; p++)
    {
        if (sieve[p])
        {
            a = count_factors(N, p);
            result = (result * powmod(p, 2*a, M) + result) % M;
        }
    }
    return result;
}


int main() 
{
    clock_t t;
    t = clock();
    printf("%d\n", p429());
    t = clock()-t;
    printf("Time: %.3f\n", ((float) t)/CLOCKS_PER_SEC);
}
